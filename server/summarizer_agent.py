from crewai import Agent
from typing import Dict, Any, List
import json
import re
import uuid
from enum import Enum
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
import os

class FontSize(str, Enum):
    BIG = "BIG"
    MEDIUM = "MEDIUM"
    SMALL = "SMALL"

class TextAlign(str, Enum):
    LEFT = "LEFT"
    CENTER = "CENTER"
    RIGHT = "RIGHT"

class FontColor(str, Enum):
    PRIMARY = "PRIMARY"
    DEFAULT = "DEFAULT"
    SECONDARY = "SECONDARY"
    TERTIARY = "TERTIARY"

class FontWeight(str, Enum):
    BOLD = "BOLD"
    REGULAR = "REGULAR"
    THIN = "THIN"

class Background(str, Enum):
    PRIMARY = "PRIMARY"
    DEFAULT = "DEFAULT"
    SECONDARY = "SECONDARY"
    TERTIARY = "TERTIARY"

class BorderType(str, Enum):
    SOLID = "SOLID"
    DASHED = "DASHED"
    DOTTED = "DOTTED"
    NONE = "NONE"

class JustifyContent(str, Enum):
    SPACE_BETWEEN = "SPACE_BETWEEN"
    SPACE_AROUND = "SPACE_AROUND"
    CENTER = "CENTER"
    STRETCH = "STRETCH"

class AlignItems(str, Enum):
    START = "START"
    CENTER = "CENTER"
    END = "END"
    STRETCH = "STRETCH"

class FlexWrap(str, Enum):
    WRAP = "WRAP"
    NOWRAP = "NOWRAP"

class Icon(str, Enum):
    PEDESTRIAN = "üö∂"
    PEDESTRIAN_W = "üö∂‚Äç‚ôÄÔ∏è"
    FIRE = "üî•"
    SPEAK = "üó£Ô∏è"
    HAMMER = "üî®"
    USERS = "üë•"
    SNOW = "‚ùÑÔ∏è"
    HAMMER_AND_WRENCH = "üõ†Ô∏è"
    TREE = "üå≥"
    ROCK = "ü™®"
    CAVE = "üèïÔ∏è"
    BOW_AND_ARROW = "üèπ"
    BOAT = "üõ∂"
    WHEAT = "üåæ"
    HOUSES = "üèòÔ∏è"
    COW = "üêÑ"
    LEAF = "üåø"
    PRAY = "üôè"

class SummarizerAgent:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        with open('json_format.md', 'r', encoding='utf-8') as f:
            format_guide = f.read()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len,
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —á–∞–Ω–∫–∏
        texts = text_splitter.create_documents([format_guide])

        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º API –∫–ª—é—á–∞
        embeddings = OpenAIEmbeddings(
            model="text-embedding-ada-002",
            openai_api_key=os.getenv("OPENAI_API_KEY")
        )
        self.knowledge_base = FAISS.from_documents(texts, embeddings)
            
        self.agent = Agent(
            role='UI Content Generator',
            goal='Generate well-structured UI content in JSON format based on the provided text. Use the following format: ',
            backstory='''
### 1. **BaseNode Class**

The `BaseNode` class serves as the base class for all UI components and contains several attributes that define the visual style, behavior, and layout of the node. It includes properties like `id`, `nodeType`, layout attributes (`padding`, `margin`, `height`, `width`), and other visual settings like `background`, `borderType`, `fontColor`, and `opacity`.

**Key Methods and Features:**

* `addLink(String to)`: Adds a link from the current node to another node.
* **Nested `Link` Class**: Represents a link between two nodes, identified by their IDs.
* The class is extended by other specialized components such as `Text`, `Stack`, `IconText`, etc.

### 2. **TitledContainer Class**

* Extends `BaseNode` and represents a container with a title.
* It includes a `titleText` (a `Text` object) and an optional `content` (another `BaseNode`).

### 3. **Text Class**

* Extends `BaseNode` and represents a text element.
* It contains properties for text formatting such as `fontSize`, `HTMLText`, `textAlign`, `fontColor`, and `fontWeight`.

### 4. **Stack Class**

* Extends `BaseNode` and represents a stack (a layout that can be vertical or horizontal).
* It includes properties such as `gap`, `flexWrap`, `justifyContent`, and `alignItems`, which control the layout and positioning of child nodes within the stack.

### 5. **IconText Class**

* Extends `BaseNode` and represents a node containing both text and an icon.
* The icon is represented using the `Icon` enum, and the text is a `Text` object.

### 6. **CenteredContainer Class**

* Extends `BaseNode` and represents a container with a single centered child node.

### 7. **NodeType Enum**

Defines different types of nodes that can be created from `BaseNode`:

* `TEXT`, `ICON_TEXT`, `TITLED_CONTAINER`, `CENTERED_CONTAINER`, and `STACK`.

### 8. **AlignItems Enum**

Defines possible alignments for items in a container:

* `START`, `CENTER`, `END`, and `STRETCH`.

### 9. **Background Enum**

Defines possible background styles for nodes:

* `PRIMARY`, `DEFAULT`, `SECONDARY`, and `TERTIARY`.

### 10. **BorderType Enum**

Defines possible border styles for nodes:

* `SOLID`, `DASHED`, `DOTTED`, and `NONE`.

### 11. **FlexWrap Enum**

Defines whether items in a container should wrap:

* `WRAP` and `NOWRAP`.

### 12. **FontColor Enum**

Defines font color options for nodes:

* `PRIMARY`, `DEFAULT`, `SECONDARY`, and `TERTIARY`.

### 13. **FontSize Enum**

Defines font size options for text:

* `BIG`, `MEDIUM`, and `SMALL`.

### 14. **FontWeight Enum**

Defines font weight options for text:

* `BOLD`, `REGULAR`, and `THIN`.

### 15. **Icon Enum**

Defines a list of available icons that can be used in `IconText` nodes. Each icon is represented by a unique string value, such as "üö∂" for a pedestrian, "üî•" for fire, "üìö" for books, and so on.

### 16. **JustifyContent Enum**

Defines how child elements are aligned within a container:

* `SPACE_BETWEEN`, `SPACE_AROUND`, `CENTER`, and `STRETCH`.

### 17. **TextAlign Enum**

Defines text alignment options:

* `LEFT`, `CENTER`, and `RIGHT`.

### JSON Serialization Annotations

* The `@JsonTypeInfo` and `@JsonSubTypes` annotations are used to handle serialization and deserialization of polymorphic objects, allowing for different types of `BaseNode` (such as `Stack`, `Text`, `IconText`, etc.) to be recognized and properly mapped when working with JSON.
''',
            allow_delegation=False,
            verbose=True
        )

    def get_relevant_context(self, query: str) -> str:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Å–∫–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        relevant_docs = self.knowledge_base.similarity_search(query, k=3)
        return "\n".join(doc.page_content for doc in relevant_docs)

    def generate_unique_id(self) -> str:
        return str(uuid.uuid4())

    def create_text_node(self, text: str, font_size: FontSize = None, 
                        align: TextAlign = None, 
                        color: FontColor = None, 
                        weight: FontWeight = None) -> Dict[str, Any]:
        node = {
            "nodeType": "TEXT",
            "id": self.generate_unique_id(),
            "htmltext": text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º htmltext –≤–º–µ—Å—Ç–æ HTMLText –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        }
        
        if font_size:
            node["fontSize"] = font_size.value
        if align:
            node["textAlign"] = align.value
        if color:
            node["fontColor"] = color.value
        if weight:
            node["fontWeight"] = weight.value
            
        return node

    def create_stack_node(self, children: list, vertical: bool = True, 
                         gap: int = None, background: Background = None,
                         padding: str = None, border_radius: str = None,
                         justify_content: JustifyContent = None,
                         flex_wrap: FlexWrap = None) -> Dict[str, Any]:
        stack = {
            "nodeType": "STACK",
            "id": self.generate_unique_id(),
            "children": children,
            "vertical": vertical  # –ò—Å–ø–æ–ª—å–∑—É–µ–º vertical –≤–º–µ—Å—Ç–æ isVertical –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        }
        
        if gap is not None:
            stack["gap"] = gap
        if background:
            stack["background"] = background.value
        if padding:
            stack["padding"] = padding
        if border_radius:
            stack["borderRadius"] = border_radius
        if justify_content:
            stack["justifyContent"] = justify_content.value
        if flex_wrap:
            stack["flexWrap"] = flex_wrap.value
            
        return {k: v for k, v in stack.items() if v is not None}

    def create_titled_container(self, title: str, content: Dict[str, Any], 
                              divided: bool = False) -> Dict[str, Any]:
        return {
            "nodeType": "TITLED_CONTAINER",
            "id": self.generate_unique_id(),
            "titleText": self.create_text_node(
                title, 
                font_size=FontSize.MEDIUM, 
                color=FontColor.PRIMARY, 
                weight=FontWeight.BOLD,
                align=TextAlign.LEFT
            ),
            "content": content,
            "divided": divided  # –ò—Å–ø–æ–ª—å–∑—É–µ–º divided –≤–º–µ—Å—Ç–æ isDivided –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        }

    def create_icon_text(self, text: str, icon: str) -> Dict[str, Any]:
        return {
            "nodeType": "ICON_TEXT",
            "id": self.generate_unique_id(),
            "text": self.create_text_node(text),
            "icon": icon  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        }

    def create_centered_container(self, child_node: Dict[str, Any],
                                background: Background = Background.SECONDARY,
                                border_type: BorderType = BorderType.DASHED,
                                border_color: FontColor = FontColor.PRIMARY,
                                padding: str = "20px 10px",
                                border_radius: str = "8px",
                                width: str = "300px") -> Dict[str, Any]:
        return {
            "nodeType": "CENTERED_CONTAINER",
            "id": self.generate_unique_id(),
            "background": background.value,
            "borderType": border_type.value,
            "borderColor": border_color.value,
            "padding": padding,
            "borderRadius": border_radius,
            "margin": "auto",
            "width": width,
            "childNode": child_node
        }

    def generate_ui_json(self, crew_result: str) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç crew –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI.
        
        Args:
            crew_result (str): –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã crew
            
        Returns:
            Dict[str, Any]: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –¥–ª—è UI
        """
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ crew –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
            sections = crew_result.split('\n\n')
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫
            main_stack = self.create_stack_node(
                children=[],
                vertical=True,
                padding="60px 40px",
                border_radius="8px",
                gap=102,
                justify_content=JustifyContent.SPACE_BETWEEN,
                background=Background.DEFAULT
            )
            
            content_stack = self.create_stack_node(
                children=[],
                vertical=True,
                gap=64
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å–µ–∫—Ü–∏—è)
            if sections:
                title = sections[0].strip()
                content_stack["children"].append(
                    self.create_text_node(
                        title,
                        font_size=FontSize.BIG,
                        align=TextAlign.CENTER,
                        color=FontColor.PRIMARY,
                        weight=FontWeight.BOLD
                    )
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            current_section = None
            current_items = []
            
            for section in sections[1:]:
                if section.strip().endswith(':'):  # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                    if current_section and current_items:
                        content_stack["children"].append(
                            self.create_titled_container(
                                current_section,
                                self.create_stack_node(
                                    children=current_items,
                                    vertical=True,
                                    gap=2
                                ),
                                divided=False
                            )
                        )
                        current_items = []
                    current_section = section.strip().rstrip(':')
                else:  # –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    icon = self.select_icon_for_content(section)
                    current_items.append(
                        self.create_icon_text(section.strip(), icon)
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if current_section and current_items:
                content_stack["children"].append(
                    self.create_titled_container(
                        current_section,
                        self.create_stack_node(
                            children=current_items,
                            vertical=True,
                            gap=2
                        ),
                        divided=False
                    )
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç–µ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫
            main_stack["children"].append(content_stack)
            
            return main_stack
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UI JSON: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self.create_stack_node(
                children=[
                    self.create_text_node(
                        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                        font_size=FontSize.MEDIUM,
                        align=TextAlign.CENTER,
                        color=FontColor.SECONDARY
                    )
                ],
                vertical=True,
                gap=20
            )

    def select_icon_for_content(self, content: str) -> str:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            content (str): –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            
        Returns:
            str: –ò–∫–æ–Ω–∫–∞ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏
        """
        content = content.lower()
        
        # –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º –∏–∫–æ–Ω–æ–∫
        icon_mapping = {
            '—á–µ–ª–æ–≤–µ–∫': Icon.PEDESTRIAN.value,
            '–æ—Ä—É–¥–∏—è': Icon.HAMMER_AND_WRENCH.value,
            '–æ–≥–æ–Ω—å': Icon.FIRE.value,
            '—Ä–µ—á—å': Icon.SPEAK.value,
            '–≥—Ä—É–ø–ø—ã': Icon.USERS.value,
            '–ª–µ–¥': Icon.SNOW.value,
            '–¥–µ—Ä–µ–≤–æ': Icon.TREE.value,
            '–∫–∞–º–µ–Ω—å': Icon.ROCK.value,
            '–ø–µ—â–µ—Ä–∞': Icon.CAVE.value,
            '–æ—Ö–æ—Ç–∞': Icon.BOW_AND_ARROW.value,
            '–ª–æ–¥–∫–∞': Icon.BOAT.value,
            '–∑–µ–º–ª–µ–¥–µ–ª–∏–µ': Icon.WHEAT.value,
            '–ø–æ—Å–µ–ª–µ–Ω–∏–µ': Icon.HOUSES.value,
            '—Å–∫–æ—Ç': Icon.COW.value,
            '—Ä–∞—Å—Ç–µ–Ω–∏—è': Icon.LEAF.value,
            '—Ä–∏—Ç—É–∞–ª': Icon.PRAY.value
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        for keyword, icon in icon_mapping.items():
            if keyword in content:
                return icon
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –∑–Ω–∞—á–æ–∫
        return Icon.PEDESTRIAN.value

    def process_content_with_rag(self, content: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        layout_context = self.get_relevant_context("layout and styling properties")
        text_formatting = self.get_relevant_context("text formatting and attributes")
        container_specs = self.get_relevant_context("container specifications")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON –≤ —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        main_stack = self.create_stack_node(
            children=[
                self.create_stack_node(
                    children=[
                        self.create_text_node(
                            "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–Ω–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
                            font_size=FontSize.BIG,
                            align=TextAlign.CENTER,
                            color=FontColor.PRIMARY,
                            weight=FontWeight.BOLD
                        ),
                        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    ],
                    vertical=True,
                    gap=64
                )
            ],
            vertical=True,
            padding="60px 40px",
            border_radius="8px",
            gap=102,
            justify_content=JustifyContent.SPACE_BETWEEN,
            background=Background.DEFAULT
        )
        
        return main_stack

    def save_response(self, content: str, output_file: str):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON
        ui_json = self.process_content_with_rag(content)
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(ui_json, f, ensure_ascii=False, indent=2)
        return output_file

# Create instance
summarizer_agent = SummarizerAgent() 